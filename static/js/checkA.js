// === Âü∫Êú¨Â§âÊï∞ ===
let timeLimit;
let targetCorrect = 0;
let correctAnswers = 0;
let mistakes = 0;
let correctWordsArray = [];
let mistakeWordsArray = [];
let currentWord;
let gameIsOver = false;
let isRecognitionActive = false;
let usedDefaultWords = [];

const WORDS_KEY = 'registeredWords';
let registeredWords = [];

// ==== Ëã±Â≠ó‚Üí„Å≤„Çâ„Åå„Å™ fallback ====
const LETTER_TO_HIRA = {
  'A':'„Åà„Éº','B':'„Å≥„Éº','C':'„Åó„Éº','D':'„Åß„ÅÉ„Éº','E':'„ÅÑ„Éº','F':'„Åà„Åµ','G':'„Åò„Éº','H':'„Åà„ÅÑ„Å°',
  'I':'„ÅÇ„ÅÑ','J':'„Åò„Åá„Éº','K':'„Åë„Éº','L':'„Åà„Çã','M':'„Åà„ÇÄ','N':'„Åà„Å¨','O':'„Åä„Éº','P':'„Å¥„Éº',
  'Q':'„Åç„ÇÖ„Éº','R':'„ÅÇ„Éº„Çã','S':'„Åà„Åô','T':'„Å¶„ÅÉ„Éº','U':'„ÇÜ„Éº','V':'„Å∂„ÅÑ','W':'„Å†„Å∂„Çä„ÇÖ„Éº',
  'X':'„Åà„Å£„Åè„Åô','Y':'„Çè„ÅÑ','Z':'„Åú„Å£„Å®'
};
for (const k in LETTER_TO_HIRA) LETTER_TO_HIRA[k.toLowerCase()] = LETTER_TO_HIRA[k];

function katakanaToHiraganaJS(s) {
  return s.replace(/[\u30A1-\u30F6]/g, ch => String.fromCharCode(ch.charCodeAt(0) - 0x60));
}
function lettersToHiraganaJS(s) {
  return Array.from(s).map(ch => LETTER_TO_HIRA[ch] ?? ch).join('');
}
function toHiraganaClient(text) {
  try {
    let t = text.normalize('NFKC');
    t = lettersToHiraganaJS(t);
    t = katakanaToHiraganaJS(t);
    t = t.replace(/\s+/g, ' ').trim();
    return t;
  } catch(e) { return text; }
}
async function toHiraganaServerOrClient(text) {
  try {
    const res = await fetch('/utterance_check/hiragana', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ text })
    });
    if (res.ok) {
      const j = await res.json();
      const converted = (j && j.converted && j.converted.trim()) ? j.converted : toHiraganaClient(text);
      const phonemes = (j && typeof j.phonemes === 'string') ? j.phonemes : '';
      return { converted, phonemes };
    }
  } catch (e) {}
  return { converted: toHiraganaClient(text), phonemes: '' };
}

// === Èü≥Â£∞Ë™çË≠òË®≠ÂÆö ===
const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
recognition.lang = 'ja-JP';
recognition.continuous = false;
recognition.interimResults = false;

// === ÂçòË™ûÁÆ°ÁêÜ ===
async function getRandomWord(retryCount = 0) {
  try {
    const res = await fetch('/utterance_check/generate_word', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ usedWords: usedDefaultWords })
    });

    if (!res.ok) {
      throw new Error(`HTTP error: ${res.status}`);
    }

    const data = await res.json();
    if (data.word) {
      usedDefaultWords.push(data.word);
      return data.word;
    }

    if (retryCount < 2) { // ÊúÄÂ§ß3ÂõûÂÜçË©¶Ë°å
      console.warn("ÂÜçË©¶Ë°å‰∏≠: ÂçòË™ûÁîüÊàêÂ§±Êïó");
      return await getRandomWord(retryCount + 1);
    }

    console.error("ÂçòË™ûÁîüÊàê„Å´Â§±ÊïóÔºàÊúÄÁµÇÔºâ:", data.error);
    return "ÔºàÂçòË™ûÁîüÊàêÂ§±ÊïóÔºâ";

  } catch (e) {
    console.error("getRandomWord „Ç®„É©„Éº:", e);
    if (retryCount < 2) {
      return await getRandomWord(retryCount + 1);
    }
    return "ÔºàÂçòË™ûÁîüÊàêÂ§±ÊïóÔºâ";
  }
}

async function preGenerateWords() {
  preGeneratedWords = [];
  const count = 5;
  showLoading(true);
  for (let i = 0; i < count; i++) {
    const word = await getRandomWord();
    preGeneratedWords.push(word);
  }
  showLoading(false);
}
let preGeneratedWords = [];
let preGenerateIndex = 0;
function getNextWord() {
  if (preGenerateIndex < preGeneratedWords.length)
    return preGeneratedWords[preGenerateIndex++] || "ÔºàÂçòË™ûÁîüÊàêÂ§±ÊïóÔºâ";
  return "ÔºàÂçòË™û„Åå„ÅÇ„Çä„Åæ„Åõ„ÇìÔºâ";
}

// === DOM„É≠„Éº„Éâ ===
document.addEventListener("DOMContentLoaded", function () {
  const timerInput = document.getElementById("timerInput");
  const targetInput = document.getElementById("targetInput");
  const warningMessage = document.getElementById("warning");
  const initialScreen = document.getElementById("initial-screen");
  const playingScreen = document.getElementById("playing-screen");
  const wordDisplay = document.getElementById("wordDisplay");
  const timerDisplay = document.getElementById("timerDisplay");
  const textLog = document.getElementById("textLog");
  const resultElement = document.getElementById("result");
  const phonemeElement = document.getElementById("phoneme");
  const startButton = document.getElementById("start-button");

  // ‚úÖ ËøΩÂä†‚ë†Ôºö„ÄåÁõÆÊ®ô„ÅÆÊ≠£Ëß£Êï∞„Äç„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇíÂçò‰∏ÄÈÅ∏Êäû„Å´„Åô„Çã
  document.querySelectorAll('input[name="targetCorrect"]').forEach(box => {
    box.addEventListener('change', (e) => {
      if (e.target.checked) {
        document.querySelectorAll('input[name="targetCorrect"]').forEach(other => {
          if (other !== e.target) other.checked = false;
        });
        targetInput.value = ''; // ÊâãÂãïÂÖ•ÂäõÊ¨Ñ„Çí„É™„Çª„ÉÉ„Éà
      }
    });
  });

  // ‚úÖ ÂÖ•ÂäõÊ¨Ñ„Å´Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„ÅüÂ†¥Âêà„ÄÅ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„Çí„Åô„Åπ„Å¶Â§ñ„Åô ‚Üê‚òÖ„Åì„Çå„ÇíËøΩÂä†
  targetInput.addEventListener('input', () => {
    if (targetInput.value.trim() !== '') {
      document.querySelectorAll('input[name="targetCorrect"]').forEach(cb => cb.checked = false);
    }
  });

  // ‚úÖ ËøΩÂä†‚ë°Ôºö„ÄåÂà∂ÈôêÊôÇÈñì„Äç„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇíÂçò‰∏ÄÈÅ∏Êäû„Å´„Åô„Çã
  document.querySelectorAll('input[name="timer"]').forEach(box => {
    box.addEventListener('change', (e) => {
      if (e.target.checked) {
        document.querySelectorAll('input[name="timer"]').forEach(other => {
          if (other !== e.target) other.checked = false;
        });
        timerInput.value = ''; // ÊâãÂãïÂÖ•ÂäõÊ¨Ñ„Çí„É™„Çª„ÉÉ„Éà
      }
    });
  });

  // ‚úÖ ÂÖ•ÂäõÊ¨Ñ„Å´Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„ÅüÂ†¥Âêà„ÄÅ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„Çí„Åô„Åπ„Å¶Â§ñ„Åô ‚Üê‚òÖ„Åì„Çå„ÇÇËøΩÂä†
  timerInput.addEventListener('input', () => {
    if (timerInput.value.trim() !== '') {
      document.querySelectorAll('input[name="timer"]').forEach(cb => cb.checked = false);
    }
  });

  if (startButton) {
    startButton.addEventListener('click', async function () {
      localStorage.removeItem('phonemeIntensityData');

      const targetValue = parseInt(targetInput.value) ||
        [...document.querySelectorAll('input[name="targetCorrect"]:checked')]
          .map(el => parseInt(el.value))[0] || 5;

      const timeValue = parseInt(timerInput.value) ||
        [...document.querySelectorAll('input[name="timer"]:checked')]
          .map(el => parseInt(el.value))[0] || 30;

      if (targetValue > 0 && timeValue > 0) {

        // ‚úÖ „Åì„Åì„Åß„É™„Çª„ÉÉ„Éà„Åô„Çã
        correctAnswers = 0;
        mistakes = 0;
        correctWordsArray = [];
        mistakeWordsArray = [];
        usedDefaultWords = [];
        gameIsOver = false;

        targetCorrect = targetValue;
        timeLimit = timeValue;

        warningMessage.classList.add('hidden');
        initialScreen.classList.add('hidden');
        playingScreen.classList.remove('hidden');
        await preGenerateWords();
        startGame();
      } else {
        warningMessage.classList.remove('hidden');
      }
    });
  }

  async function startGame() {
    currentWord = getNextWord();
    wordDisplay.textContent = currentWord;
    correctAnswers = 0;
    mistakes = 0;
    startRecognition();
    timer();
  }

  async function nextWordAndRecognition() {
    currentWord = getNextWord();
    wordDisplay.textContent = currentWord;
    textLog.textContent = 'üëÇ Ê¨°„ÅÆÂçòË™û„ÇíË™çË≠ò‰∏≠...';
    resultElement.textContent = '';
    phonemeElement.textContent = '';
    startRecognition();
  }

  function startRecognition() {
    try {
      recognition.start();
      textLog.textContent = 'üé§ Èü≥Â£∞„ÇíËÅû„ÅçÂèñ„Çä‰∏≠...';
      isRecognitionActive = true;
    } catch (e) {
      console.error("Recognition start error:", e);
    }
  }

  recognition.addEventListener('result', async (event) => {
    const last = event.results.length - 1;
    const transcript = event.results[last][0].transcript.trim();
    if (!transcript) return;

    if (!event.results[last].isFinal) {
      textLog.textContent = `ÈÄî‰∏≠Ë™çË≠ò: ${transcript}`;
      return;
    }

    // FinalË™çË≠òÁµêÊûú
    textLog.textContent = `Ë™çË≠òÁµêÊûú: ${transcript}`;
    
    // ‰∏¶Âàó„ÅßÂêåÊôÇ„Å´„Å≤„Çâ„Åå„Å™Â§âÊèõ„ÇíÂÆüË°å
    const [recogRes, expectRes] = await Promise.all([
      toHiraganaServerOrClient(transcript),
      toHiraganaServerOrClient(currentWord)
    ]);

    resultElement.textContent = `„Å≤„Çâ„Åå„Å™Â§âÊèõÁµêÊûú: ${recogRes.converted}`;
    phonemeElement.textContent = `Èü≥Á¥†: /${recogRes.phonemes || ''}/`;

    if (recogRes.converted === expectRes.converted) {
      resultElement.textContent += " ‚úÖÊ≠£Ëß£ÔºÅ";
      correctAnswers++;
      correctWordsArray.push(currentWord);
    } else {
      resultElement.textContent += " ‚ùå‰∏çÊ≠£Ëß£";
      mistakes++;
      mistakeWordsArray.push(`${transcript} (${currentWord})`           );
    }

    // === Èü≥Á¥†Âº∑Â∫¶„Éá„Éº„Çø„Çí localStorage „Å´‰øùÂ≠ò ===
    try {
      const allData = JSON.parse(localStorage.getItem('phonemeIntensityData') || '[]');
      const record = {
        word: currentWord,                   // Âá∫È°å„Åï„Çå„ÅüÂçòË™û
        recognized: transcript,              // Ë™çË≠ò„Åï„Çå„ÅüÂçòË™û
        correctAnswer: (recogRes.converted === expectRes.converted),
        phonemesExpected: expectRes.phonemes || '',
        phonemesRecognized: recogRes.phonemes || '',
        confidence: event.results[last][0].confidence || 0, // SpeechRecognition„ÅÆ‰ø°È†ºÂ∫¶
        phonemeIntensities: [],              // ‰ªä„ÅØÁ©∫„ÄÇÂ∞ÜÊù•ÁöÑ„Å´Âº∑Â∫¶ÂÄ§„ÇíÂÖ•„Çå„Çã„Å™„Çâ„Åì„Åì„Å´ËøΩÂä†
        intensity: 0.5                       // ‰ªÆ„ÅÆÂπ≥ÂùáÂÄ§
      };
      allData.push(record);
      localStorage.setItem('phonemeIntensityData', JSON.stringify(allData));
    } catch (err) {
      console.error('phonemeIntensityData ‰øùÂ≠ò„Ç®„É©„Éº:', err);
    }

    recognition.stop();
  });

  recognition.addEventListener('start', () => {
    console.log('Ë™çË≠òÈñãÂßã');
    isRecognitionActive = true;
    textLog.textContent = 'üéôÔ∏è Èü≥Â£∞Ë™çË≠ò„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇË©±„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
  });

  recognition.addEventListener('end', async () => {
    console.log('Ë™çË≠òÁµÇ‰∫Ü');
    isRecognitionActive = false;
    // Ëá™Âãï„ÅßÂÜçÈñã
    if (!gameIsOver) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      nextWordAndRecognition();  // endÂæå„Å´Ê¨°„ÅÆÂçòË™û„ÇíÂá∫„Åó„Å¶ÂÜç„Çπ„Çø„Éº„Éà
    }
  });

  recognition.addEventListener('error', (e) => {
    console.error('Èü≥Â£∞Ë™çË≠ò„Ç®„É©„Éº:', e);
    textLog.textContent = `‚ö†Ô∏è Èü≥Â£∞Ë™çË≠ò„Ç®„É©„Éº: ${e.error}`;
    isRecognitionActive = false;
    setTimeout(() => startRecognition(), 1500);
  });

  function timer() {
    if (timeLimit > 0) {
      timerDisplay.textContent = `Time: ${timeLimit}`;
      timeLimit--;
      setTimeout(timer, 1000);
    } else {
      endGame();
    }
  }

  function endGame() {
    gameIsOver = true;
    recognition.stop();

    const url = new URL('/utterance_check/checkA_end', window.location.origin);
    url.searchParams.append('correct', correctAnswers);
    url.searchParams.append('mistakes', mistakes);
    url.searchParams.append('correctWords', correctWordsArray.join("„ÄÅ"));
    url.searchParams.append('mistakeWords', mistakeWordsArray.join("„ÄÅ"));
    url.searchParams.append('targetCorrect', targetCorrect);
    window.location.href = url.toString();
  }
});

// === „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫ ===
function showLoading(show) {
  let loading = document.getElementById('loading');
  if (!loading) return;
  loading.classList[show ? 'remove' : 'add']('hidden');
}